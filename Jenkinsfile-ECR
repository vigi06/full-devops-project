@Library('shared-library') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '303150498045')
        string(name: 'Region', description: "tag of the docker build", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR Repo", defaultValue: 'naruto1995')
    }

    stages {
        stage('git checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        gitCheckout(
                            branch: "main",
                            url: "https://github.com/vigi06/full-devops-project.git"
                        )
                    }
                }
            }
        }

        stage('Unit Testing') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        mvnTest()
                    }
                }
            }
        }

        stage('Integration Testing') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        mvnIntegrationTest()
                    }
                }
            }
        }

        stage('Build using maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        mvnBuild()
                    }
                }
            }
        }

         stage('Docker build') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                    }
                }
            }
        }

         stage('Docker Image Scan: trivy') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                    }
                }
            }
        }

        stage('Docker Image push to ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                    }
                }
            }
        }

        stage('Docker Image Cleanup: DockerHub') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                node('worker') {
                    script {
                        dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                    }
                }
            }
        }
    }
}

